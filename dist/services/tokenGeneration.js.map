{"version":3,"file":"tokenGeneration.js","sourceRoot":"","sources":["../../src/services/tokenGeneration.ts"],"names":[],"mappings":";;;AAAA,oCAAoC;AACpC,iDAK4B;AACf,QAAA,eAAe,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;IAC1C,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC;IAChC,IAAI,IAAI,KAAK,mCAAwB,EAAE;QACnC,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,wBAAwB,EAAE,IAAI,EAAE,CAAC;QACjE,MAAM,oBAAoB,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAU,EAAE,EAAE,SAAS,EAAE,0CAA+B,EAAE,CAAC,CAAC,CAAC,yBAAyB;QACrI,OAAO,oBAAoB,CAAC;KAC/B;SAAM,IAAI,IAAI,KAAK,iCAAsB,EAAE;QACxC,MAAM,OAAO,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,sBAAsB,EAAE,IAAI,EAAE,CAAC;QAC/D,MAAM,wBAAwB,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAU,EAAE,EAAE,SAAS,EAAE,wCAA6B,EAAE,CAAC,CAAC,CAAC,yBAAyB;QACvI,OAAO,wBAAwB,CAAC;KACnC;SAAM,IAAI,IAAI,KAAK,cAAc,EAAE;QAChC,MAAM,OAAO,GAAG,EAAE,OAAO,EAAE,OAAO,EAAG,IAAI,EAAC,IAAI,CAAC,IAAI,EAAE,CAAC;QACtD,MAAM,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,OAAO,EAAE,qBAAU,EAAE,EAAE,SAAS,EAAE,kCAAuB,EAAE,CAAC,CAAC,CAAC,mBAAmB;QAC/G,OAAO,YAAY,CAAC;KACvB;AAGL,CAAC,CAAA","sourcesContent":["import * as jwt from \"jsonwebtoken\";\nimport {\n    ACCESS_TOKEN_EXPIRES_IN,\n    RESET_PASSWORD_TOKEN_EXPIRES_IN,\n    EMAIL_VERIFY_TOKEN_EXPIRES_IN,\n    JWT_SECRET,LINK_TYPE_PASSWORD_RESET,LINK_TYPE_EMAIL_VERIFY\n} from \"../config/constant\";\nexport const generate_tokens = (type, data) => {\n    const { email, user_id } = data;\n    if (type === LINK_TYPE_PASSWORD_RESET) {\n        const payload = { email: email, LINK_TYPE_PASSWORD_RESET: true };\n        const password_reset_token = jwt.sign(payload, JWT_SECRET, { expiresIn: RESET_PASSWORD_TOKEN_EXPIRES_IN }); // Use different secrets?\n        return password_reset_token;\n    } else if (type === LINK_TYPE_EMAIL_VERIFY) {\n        const payload = { email: email, LINK_TYPE_EMAIL_VERIFY: true };\n        const email_verification_token = jwt.sign(payload, JWT_SECRET, { expiresIn: EMAIL_VERIFY_TOKEN_EXPIRES_IN }); // Use different secrets?\n        return email_verification_token;\n    } else if (type === \"ACCESS_TOKEN\") {\n        const payload = { user_id: user_id , name:data.name };\n        const access_token = jwt.sign(payload, JWT_SECRET, { expiresIn: ACCESS_TOKEN_EXPIRES_IN }); // Change to async?\n        return access_token;\n    }\n\n\n}\n\n"]}