{"version":3,"file":"user.service.js","sourceRoot":"","sources":["../../src/services/user.service.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseService from \"../policies/BaseService\";\nimport {IUser} from \"../models/dbTypes\";\nimport {db} from \"../models/db\";\nimport {hashSync, genSaltSync, compareSync} from \"bcrypt\";\nimport {sign} from \"jsonwebtoken\";\nimport {v4 as uuidv4} from \"uuid\";\nimport {\n    USER_ID_PREPEND_STRING,\n    LOGOUT_TOKEN,\n    NODE_ENV,\n} from \"../config/constant\";\nimport {generate_tokens} from \"./tokenGeneration\";\nconst moment = require('moment');\nimport { compare } from \"bcrypt\"\n\nexport class UserService extends BaseService {\n    constructor() {\n        super();\n    }\n\n\n\n    registerAUser = async (user: IUser) => {\n        try {\n            const enc = {...user};\n            // if (enc.password) enc.password = hashSync(enc.password, genSaltSync(12));\n            let userExist = await db.Users.findOne({email: user.email}).exec();\n            if (!this._.isNil(userExist)) {\n                throw new Error(\"E_USER_S_10001\");\n            }\n            const user_id = USER_ID_PREPEND_STRING + uuidv4();\n            enc.user_id = user_id;\n            const access_token = generate_tokens(\"ACCESS_TOKEN\", {user_id: user_id , name:user.name});\n            enc.access_token = access_token;\n            let result = await db.Users.create(enc)\n            if (this._.isNil(result)) {\n                throw new Error(\"E_USER_S_10002\");\n            }\n            return this.RESP(\"success\", \"Account created, You can login now\", {access_token: access_token});\n        } catch (error) {\n            throw error;\n        }\n    };\n\n\n    userLogin = async (decryptedData: IUser) => {\n        try {\n            const { email, password, mobile_type, login_type,  google_account_id, mobile} = decryptedData; //login_type\n            let options = {};\n            let email_present = false;\n            if (!this._.isNil(email)) {\n                email_present = true;\n            }\n            let user = await db.Users.findOne({email:email}).exec();\n            if (this._.isNil(user) && login_type === \"email\") throw new Error(\"E_USER_S_10004\");\n            if (login_type === \"email\") {\n                if (!user.password){\n                    throw new Error(\"E_USER_S_10019\")\n                }\n                const isMatch = compareSync(password, user.password);\n                if (!isMatch) throw new Error(\"E_USER_S_10003\");\n            }\n            if (user.active===false){\n                throw new Error( \"You don't have permission to login\")\n              }\n            user.access_token = generate_tokens(\"ACCESS_TOKEN\", { user_id: user.user_id ,name:user.name});\n            const result = await user.save();\n            let message = \"Logged In Successfully\";\n            return this.RESP(\"success\", message, { access_token: result.access_token });\n        } catch (error) {\n            throw error;\n        }\n    };\n\n\n\n\n    userLogout = async (decryptedData) => {\n        try {\n            const {user} = decryptedData\n            user.access_token = LOGOUT_TOKEN;\n            const result = await user.save();\n            return this.RESP(\"success\", \"Logged Out Successfully\");\n        } catch (error) {\n            throw error;\n        }\n    };\n\n\n    getUserslist = async () => {\n        try {\n            let result = await db.Users.find()\n            return this.RESP(\"success\", \"Fetched users details successfully\", {users:result });\n        } catch (error) {\n            throw error;\n        }\n    }\n\n\n    blockandUnblock = async (value) => {\n        try {\n            const { email, active } = value\n            let existingResult = await db.Users.findOne({ \"email\": email }).exec();\n            //@ts-ignore\n            const result = await db.Users.findOneAndUpdate({ \"email\": email }, { $set: { active: !existingResult.active ,access_token:\"LOGOUT_TOKEN\"} });\n            return this.RESP(\"success\", \"user updated successfully\", existingResult);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n\n    changePassword = async (value) => {\n        try {\n            const { user, old_password, new_password } = value\n            let existingResult = await db.Users.findOne({ \"user_id\": user.user_id }).exec();\n            const isValid =  compare(old_password, existingResult.password)\n            if (isValid) {\n                //@ts-ignore\n                const passwordNew = await hashSync(new_password, genSaltSync(12));\n                const result = await db.Users.findOneAndUpdate({ \"user_id\":user.user_id }, { \"password\": passwordNew });\n                return this.RESP(\"success\", \"Password changed successfully !\");\n            }\n            throw new Error(\"Invalid password\")\n        } catch (error) {\n            throw error\n        }\n    }\n\n}\n"]}