{"version":3,"file":"aws.service.js","sourceRoot":"","sources":["../../src/services/aws.service.ts"],"names":[],"mappings":";;;AAAA,+BAA8B;AAI9B,MAAM,EAAE,GAAG,IAAI,GAAG,CAAC,EAAE,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAA;AACvE,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,CAAC,CAAA;AAI9B,QAAA,iBAAiB,GAAG,KAAK,EAClC,WAAmB,EACnB,UAAkB,EAClB,SAAiB,MAAM,EACzB,EAAE;IACA,IAAI;QACA,MAAM,GAAG,GAAG,MAAM,EAAE,CAAC,mBAAmB,CAAC,WAAW,EAAE;YAClD,MAAM,EAAE,WAAW;YACnB,GAAG,EAAE,UAAU;YACf,OAAO,EAAE,MAAM;SAClB,CAAC,CAAA;QACF,OAAO,GAAG,CAAA;KACb;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,yBAAyB,EAAG,KAAK,CAAC,CAAA;QAC9C,MAAM,KAAK,CAAA;KACd;AACL,CAAC,CAAA;AAEY,QAAA,cAAc,GAAG,KAAK,EAC/B,WAAmB,EACnB,UAAkB,EACpB,EAAE;IACA,IAAI;QACA,MAAM,EAAE,CAAC,YAAY,CAAC,EAAE,MAAM,EAAE,WAAW,EAAE,GAAG,EAAE,UAAU,EAAE,CAAC,CAAA;KAClE;IAAC,OAAO,KAAK,EAAE;QACZ,MAAM,KAAK,CAAA;KACd;AACL,CAAC,CAAA;AAIY,QAAA,0BAA0B,GAAG,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAE/D,MAAM,GAAG,GAAG,mBAAmB,WAAW,IAAI,IAAI,CAAC,GAAG,EAAE,MAAM,GAAG,CAAC,IAAI,CAAC,YAAY,EAAE,CAAA;IACrF,MAAM,WAAW,GAAG,GAAG,CAAC,IAAI,CAAC,MAAM,CAAA;IACnC,MAAM,MAAM,GAAG;QACX,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,iBAAiB;QACrC,GAAG,EAAE,GAAG;QACR,IAAI,EAAE,WAAW;QACjB,WAAW,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ;KACjC,CAAA;IACD,IAAI;QACA,MAAM,IAAI,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAA;QAC9C,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,EAAE,CAAC,CAAA;QACrD,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAA;QAC/B,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAA;QAClB,IAAI,EAAE,CAAA;KACT;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,CAAC,GAAG,CAAC,aAAa,EAAG,KAAK,CAAC,CAAA;KACrC;AACL,CAAC,CAAA;AAID,2DAA2D;AAC3D,8EAA8E;AAC9E,sCAAsC;AACtC,uBAAuB;AACvB,mCAAmC;AACnC,2DAA2D;AAC3D,6BAA6B;AAC7B,qCAAqC;AACrC,QAAQ;AACR,YAAY;AACZ,qCAAqC;AACrC,gCAAgC;AAChC,mBAAmB;AACnB,6DAA6D;AAC7D,yFAAyF;AACzF,wEAAwE;AACxE,gCAAgC;AAChC,YAAY;AACZ,yBAAyB;AACzB,wBAAwB;AACxB,8BAA8B;AAC9B,6BAA6B;AAC7B,QAAQ;AACR,IAAI;AAIJ,8DAA8D;AAC9D,yCAAyC;AACzC,sCAAsC;AACtC,oDAAoD;AACpD,QAAQ;AACR,aAAa;AACb,IAAI","sourcesContent":["import * as AWS from 'aws-sdk'\nimport {\n    AWS_BUCKET_NAME, NODE_ENV\n} from '../config/constant'\nconst S3 = new AWS.S3({ signatureVersion: 'v4', region: 'ap-south-1' })\nAWS.config.update({ region: 'ap-south-1' })\n\n\n\nexport const getPreSignedUrlS3 = async (\n    bucket_name: string,\n    object_key: string,\n    expiry: number = 604800\n) => {\n    try {\n        const url = await S3.getSignedUrlPromise('getObject', {\n            Bucket: bucket_name,\n            Key: object_key,\n            Expires: expiry\n        })\n        return url\n    } catch (error) {\n        console.log(\"getPreSignedUrlS3 error\" , error)\n        throw error\n    }\n}\n\nexport const deleteS3Object = async (\n    bucket_name: string,\n    object_key: string\n) => {\n    try {\n        await S3.deleteObject({ Bucket: bucket_name, Key: object_key })\n    } catch (error) {\n        throw error\n    }\n}\n\n\n\nexport const uploadFileUserProfilePhoto = async (req, res, next) => {\n\n    const key = `photos/customer/${12369854701}/${Date.now()}_p_${req.file.originalname}`\n    const fileContent = req.file.buffer\n    const params = {\n        Bucket: process.env.AWS_S3_BUCKETNAME,\n        Key: key, // File name you want to save as in S3\n        Body: fileContent,\n        ContentType: req.file.mimetype\n    }\n    try {\n        const data = await S3.upload(params).promise()\n        console.log(`photo uploaded successfully key ${key}`)\n        req.file.s3_url = data.Location\n        req.file.key = key\n        next()\n    } catch (error) {\n        console.log(\"aws service\" , error)\n    }\n}\n\n\n\n// export const uploadUserPhoto = async (file, userID) => {\n//     const key = `photos/users/${userID}/${Date.now()}_${file.originalname}`\n//     const fileContent = file.buffer\n//     const params = {\n//         Bucket: AWS_BUCKET_NAME,\n//         Key: key, // File name you want to save as in S3\n//         Body: fileContent,\n//         ContentType: file.mimetype\n//     }\n//     try {\n//         if (NODE_ENV === 'test') {\n//             file.s3_url = key\n//         } else {\n//             const data = await S3.upload(params).promise()\n//             console.log(`File uploaded successfully. ${data.Location} and key ${key}`)\n//             const url = await getPreSignedUrlS3(AWS_BUCKET_NAME, key)\n//             file.s3_url = url\n//         }\n//         file.key = key\n//     } catch (error) {\n//         file.isError = true\n//         file.error = error\n//     }\n// }\n\n\n\n// export const uploadUserPhotos = async (req, res, next) => {\n//     const { user } = req.decryptedData\n//     for (const file of req.files) {\n//         await uploadUserPhoto(file, user.user_id)\n//     }\n//     next()\n// }\n"]}