{"version":3,"file":"customer.service.js","sourceRoot":"","sources":["../../src/services/customer.service.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseService from \"../policies/BaseService\";\nimport { ICustomer } from \"../models/dbTypes\";\nimport { db } from \"../models/db\";\n\nexport class CustomerService extends BaseService {\n  constructor() {\n    super();\n  }\n  registerACustomer = async (customer: ICustomer) => {\n    try {\n      const { mainAadhaar , familyAadhaar} = customer\n      let existCustomer = await db.Customers.findOne({ \"mainAadhaar\": mainAadhaar}).exec();\n      let existfamily = await db.Customers.findOne({\"familyAadhaar\": familyAadhaar }).exec();\n      if (!this._.isNil(existCustomer) || !this._.isNil(existfamily) ) throw \"Customer or family registered , Try to find user using main aadhaar No \";\n      const enc = { ...customer };\n      let result = await db.Customers.create(enc)\n      return this.RESP(\"success\", \"registered successfully\", { result });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n\n  updateCustomer = async (value: any) => {\n    try {\n      const { _id } = value.data\n      const query = { \"_id\": _id }\n      const option = { new: true }\n      console.log(\"data\", _id, value.data)\n      const result = await db.Customers.findOneAndUpdate(query, value.data, option);\n      if (result) {\n        return this.RESP(\"success\", \"customer data updated successfully\", result);\n      }\n    } catch (error) {\n      throw error;\n    }\n  };\n\n\n\n\n  findCustomer = async (data) => {\n    try {\n      const {findkey , mainAadhaar , mobile,consumerNo ,regNo} =data\n      let options = {};\n      if (findkey === \"mainAadhaar\") {\n        options = { mainAadhaar: mainAadhaar };\n      } else if (findkey === \"mobile\") {\n        options = { mobile: mobile };\n      } else if (findkey === \"consumerNo\") {\n        options = { consumerNo: consumerNo };\n      }\n      else if (findkey === \"regNo\") {\n        options = { regNo: regNo };\n      } else {\n        options = { mainAadhaar: mainAadhaar };\n      }\n      let result = await db.Customers.findOne(options).exec();\n      if (this._.isNil(result)) throw(\"customer not found\")\n      //@ts-ignore\n      if (result == null) throw \"Customer not found\";\n      return this.RESP(\"success\", \"customer found successfully\", result);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n\n  statsData = async (startDateISO, endDateISO) => {\n    try {\n      const result = await db.Customers.aggregate([\n        {\n          $match: {\n            createdAt: {\n              $gte: startDateISO.toDate(),\n              $lt: endDateISO.toDate(),\n            },\n          },\n        },\n        {\n          $group: {\n            _id: { $dateToString: { format: \"%Y-%m-%d\", date: \"$createdAt\", timezone: \"+05:30\" } },\n            customers: { $push: \"$$ROOT\" },\n          },\n        },\n        {\n          $project: {\n            _id: 0,\n            join_date: \"$_id\",\n            customers: 1,\n          },\n        },\n        { $sort: { join_date: -1 } },\n      ]);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n\n\n\n  statsByAgent = async (agent: any) => {\n    try {\n      const { mainAgent } = agent\n      const result = await db.Customers.aggregate([\n        {\n          $match: {\n            \"mainAgent\": mainAgent\n          },\n        },\n      ]);\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n\n\n\n  getLiveStats = async (data: any) => {\n    try {\n      const result = {\n        userCount: 1,\n        CustomerCount: 1,\n        agentCount: 1\n      };\n      result.userCount = await db.Users.estimatedDocumentCount();\n      result.CustomerCount = await db.Customers.estimatedDocumentCount();\n      result.agentCount = await db.Agent.estimatedDocumentCount()\n      return result;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  deleteCustomerdata = async (Id: string) => {\n    try {\n      //@ts-ignore\n      let existCustomer = await db.Customers.findOne({ \"_id\": Id }).exec();\n      console.log(\"id\", existCustomer)\n      if (this._.isNil(existCustomer)) {\n        throw \"Customer not found\";\n      }\n      //@ts-expect-error\n        const trashCustomer = { \"date\": existCustomer.date, \"mainAadhaar\": existCustomer.mainAadhaar,\"name\": existCustomer.name, \"remarks\": existCustomer.remarks, \"docsReturnDate\": existCustomer.docsReturnDate,\"familyAadhaar\": existCustomer.familyAadhaar,\"subAgent\": existCustomer.subAgent,\"mobile\": existCustomer.mobile, \"mainAgent\": existCustomer.mainAgent,\n        }\n        //@ts-ignore\n        let trashResult = await db.trashUsers.create(trashCustomer)\n        console.log(\"trash -res\", trashResult)\n        let result = await db.Customers.findByIdAndRemove(Id).exec();\n        console.log(\"remove\", result)\n        if (result.name == null) throw \"customer not found\";\n        console.log(result)\n        return this.RESP(\"success\", \"customer deleted successfully\", result);\n      //}\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n\n\n  getCustomerlist = async (page, limit) => {\n    const skipIndex = (page - 1) * limit;\n    try {\n      const result = await db.Customers.find()\n      .limit(limit)\n      .skip(skipIndex)\n      .exec();\n      return this.RESP(\"success\", \"Fetched customer details successfully\", result);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n\n\n  getTrashCustomer = async () => {\n    try {\n      const result = await db.trashUsers.find()\n      return this.RESP(\"success\", \"Fetched all trash customer details successfully\", result);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n\n  uploadUserPhoto = async (data, url) => {\n    try {\n      const { photo_key } = data\n      const result = await db.Customers.findOne({ \"mainAadhaar\": data.mainAadhaar }, { new: true });\n      const query = { \"_id\": result._id }\n      const option = { new: true }\n      if (photo_key === \"InstalationLetter\") {\n        await db.Customers.findOneAndUpdate(query, { $set: { InstalationLetter: url } }, option);\n      }\n      else if (photo_key === \"satisfactionLetter\") {\n        await db.Customers.findOneAndUpdate(query, { $set: { satisfactionLetter: url } }, option);\n      }\n      else {\n        await db.Customers.findOneAndUpdate(query, { $set: { otherLetter: url } }, option);\n      }\n      return this.RESP(\"success\", \"Customer photo uploaded successfully\");\n    } catch (error) {\n      console.log(\"error\", error)\n      throw error;\n    }\n  };\n}\n"]}