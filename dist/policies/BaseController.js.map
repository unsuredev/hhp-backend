{"version":3,"file":"BaseController.js","sourceRoot":"","sources":["../../src/policies/BaseController.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAGb,qCAAqC;AACrC,4BAA6B;AAC7B,iDAAmD;AAEnD,MAAqB,cAAc;IAG/B;QAIO,eAAU,GAAG;YAChB,MAAM,EAAE;gBACJ,IAAI,EAAE;oBACF,KAAK,EAAE,EAAE;iBACZ;aACJ;YACD,YAAY,EAAE,IAAI;YAClB,UAAU,EAAE,KAAK;SACpB,CAAC;QAGF;;;;;;WAMG;QACH,sFAAsF;QACtF,gCAAgC;QAChC,mEAAmE;QACnE,2DAA2D;QAC3D,QAAQ;QACR,uCAAuC;QACvC,gCAAgC;QAChC,eAAe;QACf,2DAA2D;QAC3D,QAAQ;QACR,yBAAyB;QACzB,0BAA0B;QAC1B,iCAAiC;QACjC,SAAS;QACT,EAAE;QACF,oCAAoC;QACpC,uBAAuB;QACvB,0BAA0B;QAC1B,qBAAqB;QACrB,KAAK;QACL,sGAAsG;QAC5F,QAAG,GAAG,CAAC,IAAW,EAAC,KAAY,EAAC,EAAE;YACxC,aAAa;YACb,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,YAAY,EAAC,GAAC,IAAI,CAAA;YACxC,MAAM,WAAW,GAAC,EAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,YAAY,EAAC,YAAY,EAAC,CAAA;YAC3E,IAAG,0BAAe,CAAC,YAAY,CAAC,EAAC;gBAC7B,WAAW,CAAC,OAAO,GAAC,0BAAe,CAAC,YAAY,CAAC,CAAC,YAAY,CAAA;aACjE;YACD,YAAY;iBACP,IAAG,KAAK,IAAI,KAAK,CAAC,IAAI,IAAE,YAAY,IAAI,KAAK,CAAC,IAAI,IAAE,KAAK,EAAC;gBAC3D,WAAW,CAAC,OAAO,GAAC,KAAK,CAAC,OAAO,CAAA;aACpC;YACD,OAAO,WAAW,CAAA;QACtB,CAAC,CAAA;QAtDG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;QACX,sDAAsD;IAC1D,CAAC;CAqDJ;AA3DD,iCA2DC","sourcesContent":["\"use strict\";\nimport { Request, Response, NextFunction as Next } from \"express\";\nimport jwt = require(\"jsonwebtoken\");\n// import log4js = require(\"log4js\");\nimport _ = require(\"lodash\");\nimport {API_ERROR_CODES} from \"../config/constant\";\n\nexport default class BaseController {\n    // protected log: log4js.Logger;\n    protected _: _.LoDashStatic;\n    constructor() {\n        this._ = _;\n        // this.log = log4js.getLogger(this.constructor.name);\n    }\n    public joiOptions = {\n        errors: {\n            wrap: {\n                label: \"\",\n            },\n        },\n        stripUnknown: true,\n        abortEarly: false,\n    };\n\n\n    /**\n     * @param  {any} error object\n     * @param  {Request} restify http request\n     * @param  {Response} restify http response\n     * @param  {Next} restify next handler\n     * (description) sends the error response.\n     */\n    // protected ErrorResult = (error: any, _req: Request, res: Response, next: Next) => {\n    //     let finalMessage: string;\n    //     if (error.errors !== undefined && error.errors.length > 0) {\n    //         error.errors.map((x: any) => this.log.error(x));\n    //     }\n    //     if (typeof error === \"string\") {\n    //         finalMessage = error;\n    //     } else {\n    //         finalMessage = error.name + \" \" + error.message;\n    //     }\n    //     const response = {\n    //         success: false,\n    //         message: finalMessage,\n    //     };\n    //\n    //     this.log.error(finalMessage);\n    //     res.status(400);\n    //     res.send(response);\n    //     return next();\n    // };\n    /*Replacing message with API_ERROR_CODES[errorMessage].toastMessage if exits, otherwise keeping same*/\n    protected ERR = (data:object,error?:Error)=>{\n        // @ts-ignore\n        const {status,message,errorMessage}=data\n        const errorObject={status:status,message:message,errorMessage:errorMessage}\n        if(API_ERROR_CODES[errorMessage]){\n            errorObject.message=API_ERROR_CODES[errorMessage].toastMessage\n        }\n        //@ts-ignore\n        else if(error && error.name==\"MongoError\" && error.code==11000){\n            errorObject.message=error.message\n        }\n        return errorObject\n    }\n}\n"]}