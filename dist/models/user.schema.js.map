{"version":3,"file":"user.schema.js","sourceRoot":"","sources":["../../src/models/user.schema.ts"],"names":[],"mappings":"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","sourcesContent":["import {Schema} from \"mongoose\";\nimport {compareSync} from \"bcrypt\";\nimport {Document as BaseDocument} from \"mongoose\";\nimport {genSalt, hash} from \"bcrypt\";\ninterface Document extends BaseDocument {\n    createdAt?: Date;\n    updatedAt?: Date;\n}\n\n\nconst accessTokenSchema = new Schema({\n    access_token: {\n        type: String\n    },\n    refresh_token: {\n        type: String\n    },\n    account_id: {\n        type: String \n    },\n    active:{\n        type:Boolean,\n        default: true\n    }\n}, {timestamps: true});\n\n\n\nconst userSchema = new Schema({\n    user_id: {\n        type: String,\n        required: true,\n    },\n    name: {\n        type: String,\n    },\n    mobile: {\n        type: String,\n        unique: true,\n        sparse: true\n    },\n    email: {\n        type: String,\n        sparse: true,\n        unique: true,\n        required: true,\n        trim: true,\n        lowercase: true,\n    },\n    password: {\n        type: String,\n    },\n    login_type: {\n        type: String,\n        enum: [\"email\", \"google\", \"facebook\", \"apple\"],\n    },\n    google_account_id: {\n        type: String,\n        unique: true,\n        sparse: true\n    },\n    city: {\n        type: String,\n    },\n\n    active:{\n        type:Boolean,\n        default: true\n    },\n    access_token: {\n        type: String,\n    },\n}, {timestamps: true});\n\nuserSchema.pre(\"save\", function (next) {\n\n    if (this.isModified(\"password\")) {\n        genSalt(10, (err, salt) => {\n            if (err) {\n                console.log(\"error\" , err)\n                return next(err);\n            }\n            // @ts-ignore\n            hash(this.password, salt, (err, hash) => {\n                if (err) {\n                    console.log(\"error\" , err)\n                    return next(err);\n                }\n                //@ts-ignore\n                this.password = hash;\n                next();\n            });\n        });\n    } else {\n        return next();\n    }\n});\nuserSchema.methods.comparePassword = function (pw: string): boolean {\n    //@ts-ignore\n    if (compareSync(pw, this.password)) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n\n\nuserSchema.index({email: 'text', name: 'text', mobile: 'text', city: 'text'});\n\nexport {userSchema};\n"]}