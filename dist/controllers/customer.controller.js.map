{"version":3,"file":"customer.controller.js","sourceRoot":"","sources":["../../src/controllers/customer.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController from \"../policies/BaseController\";\nimport { Request, Response, NextFunction as Next } from \"express\";\nimport * as Joi from \"@hapi/joi\";\nimport { CustomerService } from \"../services/customer.service\";\nimport * as moment from \"moment\";\n\nexport class CustomerController extends BaseController {\n  constructor(private customerService: CustomerService = new CustomerService()) {\n    super();\n  }\n\n  private customerJoiSchema = Joi.object()\n    .keys({\n      name: Joi.string().required(),\n      mobile: Joi.string().required(),\n      mainAadhaar: Joi.string().required(),\n      familyAadhaar: Joi.string().required(),\n      consumerNo: Joi.string().optional().empty(\"\"),\n      mainAgent: Joi.string().required(),\n      subAgent: Joi.string().optional().empty(\"\"),\n      remarks: Joi.string().optional().empty(\"\"),\n      regNo: Joi.string().optional().empty(\"\"),\n      addedBy: Joi.string().optional().empty(\"\"),\n    })\n    .required();\n\n  private cutomerUpdateJoiSchema = Joi.object()\n    .keys({\n      name: Joi.string().optional().empty(\"\"),\n      mobile: Joi.string().optional().empty(\"\"),\n      mainAadhaar: Joi.string().optional().empty(\"\"),\n      familyAadhaar: Joi.string().optional().empty(\"\"),\n      consumerNo: Joi.string().optional().empty(\"\"),\n      mainAgent: Joi.string().optional().empty(\"\"),\n      subAgent: Joi.string().optional().empty(\"\"),\n      remarks: Joi.string().optional().empty(\"\"),\n      regNo: Joi.string().optional().empty(\"\"),\n    })\n    .required();\n\n  private statsDataJoiSchema = Joi.object().keys({\n    start_date: Joi.string().required(),\n    end_date: Joi.string().required(),\n    override_cache: Joi.boolean().default(true),\n  });\n\n  private agentJoiSchema = Joi.object().keys({\n    mainAgent: Joi.string().required(),\n    override_cache: Joi.boolean().default(true),\n  });\n\n\n  registerACustomer = async (req: Request, res: Response, next: Next) => {\n    try {\n      // const decryptedData = req.decryptedData;\n      // const value = await this.customerJoiSchema.validateAsync(decryptedData, this.joiOptions);\n      const result = await this.customerService.registerACustomer(req.body);\n      return res.status(200).json(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Bad input!,Check consumer details \",\n        errorMessage: error.message\n      }, error));\n    }\n  }\n\n  //finding a customer from DB\n  searchCustomer = async (req: Request, res: Response, next: Next) => {\n    try {\n      // const value = await this.cutomerUpdateJoiSchema.validateAsync(req.body);\n      let result = await this.customerService.findCustomer(req.body);\n      return res.status(200).json(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to find Consumer\",\n        errorMessage: error.message\n      }, error));\n    }\n  };\n\n  customerStatsData = async (req: Request, res: Response, next: Next) => {\n    try {\n      const validatedData = req.body\n      const startDateISO = moment(validatedData.start_date);\n      const endDateISO = moment(validatedData.end_date).endOf(\"day\"); // Timezone issue\n      const result = await this.customerService.statsData(startDateISO, endDateISO);\n      return res.status(200).json({ data: result });\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to find Consumers data \",\n        errorMessage: error.message\n      }, error));\n    }\n  }\n  customerByAgent = async (req: Request, res: Response, next: Next) => {\n    try {\n      // const agentName = await this.agentJoiSchema.validateAsync(req.body, this.joiOptions);\n      const result = await this.customerService.statsByAgent(req.body);\n      return res.status(200).json({ data: result });\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to find Consumer list \",\n        errorMessage: error.message\n      }, error));\n    }\n  };\n\n\n\n  getLiveStats = async (req: Request, res: Response) => {\n    try {\n      const result = await this.customerService.getLiveStats(req.body);\n      return res.status(200).json({ data: result });\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to get live stats \",\n        errorMessage: error.message\n      }, error));\n    }\n  };\n\n  // update customer\n  updateCustomer = async (req: Request, res: Response, next: Next) => {\n    try {\n\n      const { _id } = req.body\n      // const value = await this.cutomerUpdateJoiSchema.validateAsync(req.body, this.joiOptions);\n      let result = await this.customerService.updateCustomer(req.body)\n      return res.status(200).json({ data: result });\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to update consumer\",\n        errorMessage: error.message\n      }, error));\n    }\n  }\n\n\n\n\n\n  deleteCustomer = async (req: Request, res: Response, next: Next) => {\n    try {\n      let { customerId } = req.body;\n      let result = await this.customerService.deleteCustomerdata(customerId);\n      return res.send(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to delete consumer\",\n        errorMessage: error.message\n      }, error));\n    }\n  };\n\n\n  getAllCustomer = async (req: Request, res: Response) => {\n    //@ts-ignore\n    const page = parseInt(req.query.page);\n        //@ts-ignore\n    const limit = parseInt(req.query.limit);\n    try {\n\n      const result = await this.customerService.getCustomerlist(page, limit)\n      return res.status(200).json(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to get live stats \",\n        errorMessage: error.message\n      }, error));\n    }\n  };\n\n\n\n  getAllTrashCustomer = async (req: Request, res: Response) => {\n    try {\n      const result = await this.customerService.getTrashCustomer()\n      return res.status(200).json(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to get trash customers stats \",\n        errorMessage: error.message\n      }, error));\n    }\n  };\n\n\n\n  uploadUserPhoto = async (req: Request, res: Response, next: Next) => {\n    try {\n      // @ts-ignore\n      if (req.file && req.file.s3_url) {\n        // @ts-ignore\n        const ImageUrl = req.file.s3_url\n        //@ts-ignore\n        const aadhaar= req.body\n        const result = await this.customerService.uploadUserPhoto( aadhaar ,ImageUrl)\n        // @ts-ignore\n        return res.status(200).json({\n          status: 'success',\n          message: 'Customer photo uploaded successfully!',\n          // @ts-ignore\n          data: { image_url: req.file.s3_url }\n        })\n      }\n      // @ts-ignore\n      if (req.file.cloudStorageError) {\n        return res.status(400).json({\n          status: 'failed',\n          message: 'file uploading failed',\n          data: {}\n        })\n      }\n    } catch (error) {\n\n      return res.status(400).json(\n        this.ERR(\n          {\n            status: 'failed',\n            message: 'unable to upload photo',\n            errorMessage: error.message\n          },\n          error\n        )\n      )\n    }\n  }\n\n\n\n\n}\n"]}