{"version":3,"file":"agent.controller.js","sourceRoot":"","sources":["../../src/controllers/agent.controller.ts"],"names":[],"mappings":";;;AAAA,+DAAwD;AAExD,6DAAyD;AACzD,iCAAiC;AAEjC,MAAa,eAAgB,SAAQ,wBAAc;IACjD,YAAoB,eAA6B,IAAI,4BAAY,EAAE;QACjE,KAAK,EAAE,CAAC;QADU,iBAAY,GAAZ,YAAY,CAAmC;QAG3D,mBAAc,GAAG,GAAG,CAAC,MAAM,EAAE;aAClC,IAAI,CAAC;YACJ,IAAI,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YAC7B,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;YAC/B,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;SACjC,CAAC;aACD,QAAQ,EAAE,CAAC;QAId,mBAAmB;QACnB,kBAAa,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAU,EAAE,EAAE;YAChE,IAAI;gBACF,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC;gBAC/B,0FAA0F;gBAC1F,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAC/D,IAAI,cAAc,GAAG,GAAG,CAAA;gBACxB,OAAO,GAAG,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aAChD;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBACnC,MAAM,EAAE,QAAQ;oBAChB,OAAO,EAAE,0BAA0B;oBACnC,YAAY,EAAE,KAAK,CAAC,OAAO;iBAC9B,EAAE,KAAK,CAAC,CAAC,CAAC;aAAK;QAClB,CAAC,CAAC;QAKF,iBAAiB;QACjB,aAAQ,GAAG,KAAK,EAAE,GAAY,EAAE,GAAa,EAAE,IAAU,EAAE,EAAE;YAC3D,IAAI;gBACF,IAAI,MAAM,GAAG,MAAM,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;gBACrD,OAAO,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACzB;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC;oBACnC,MAAM,EAAE,QAAQ;oBAChB,OAAO,EAAE,4BAA4B;oBACrC,YAAY,EAAE,KAAK,CAAC,OAAO;iBAC9B,EAAE,KAAK,CAAC,CAAC,CAAC;aAAK;QAClB,CAAC,CAAC;IAzCF,CAAC;CA0CF;AA7CD,0CA6CC","sourcesContent":["import BaseController from \"../policies/BaseController\";\nimport { Request, Response, NextFunction as Next } from \"express\";\nimport { AgentService } from \"../services/agent.service\";\nimport * as Joi from \"@hapi/joi\";\n\nexport class AgentController extends BaseController {\n  constructor(private agentService: AgentService = new AgentService()) {\n    super();\n  }\n  private agentJoiSchema = Joi.object()\n    .keys({\n      name: Joi.string().required(),\n      mobile: Joi.string().required(),\n      address: Joi.string().required(),\n    })\n    .required();\n\n\n\n  // register a agent\n  registerAgent = async (req: Request, res: Response, next: Next) => {\n    try {\n      const decryptedData = req.body;\n      // const value = await this.agentJoiSchema.validateAsync(decryptedData,  this.joiOptions);\n      const result = await this.agentService.registerAgent(req.body);\n      let httpStatusCode = 200\n      return res.status(httpStatusCode).json(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to Register Agent\",\n        errorMessage: error.message\n    }, error));    }\n  };\n\n\n\n\n  // find all agent\n  getAgent = async (req: Request, res: Response, next: Next) => {\n    try {\n      let result = await this.agentService.getAgentslist();\n      return res.send(result);\n    } catch (error) {\n      return res.status(400).json(this.ERR({\n        status: \"failed\",\n        message: \"Unable to getAgent details\",\n        errorMessage: error.message\n    }, error));    }\n  };\n}\n"]}