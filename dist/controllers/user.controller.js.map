{"version":3,"file":"user.controller.js","sourceRoot":"","sources":["../../src/controllers/user.controller.ts"],"names":[],"mappings":"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","sourcesContent":["import BaseController from \"../policies/BaseController\";\nimport {Request, Response, NextFunction as Next} from \"express\";\nimport {UserService} from \"../services/user.service\";\nconst Joi = require(\"joi\");\n\n\nexport class UserController extends BaseController {\n    constructor(private userService: UserService = new UserService()) {\n        super();\n    }\n\n\n    private userJoiSchema = Joi.object().keys({\n        user: Joi.object().required(),\n    })\n\n\n    private blockSchema = Joi.object()\n    .keys({\n      email: Joi.string().required().lowercase().email(),\n    })\n    .required();\n\n    private chnagePasswordSchema = this.userJoiSchema.keys({\n            old_password: Joi.string().required(),\n            new_password: Joi.string().required(),\n        })\n        .required();\n\n\n    private addNewUserJoiSchema = Joi.object()\n        .keys({\n            email: Joi.string().required().lowercase().email(),\n            password: Joi.when(\"login_type\", {is: \"email\", then: Joi.string().required()}),\n            name: Joi.string().required(),\n            login_type: Joi.string().valid(\"email\", \"apple\", \"google\", \"facebook\").required(),\n            mobile: Joi.string().optional().empty(''),\n            })\n        .required();\n\n\n\n    private loginUserJoiSchema = Joi.object()\n        .keys({\n            email: Joi.string().lowercase().email().optional().empty(''),\n            password: Joi.when(\"login_type\", {is: \"email\", then: Joi.string().required()}).empty(''),\n            mobile: Joi.string().lowercase().optional().empty(''),\n            login_type: Joi.string().valid(\"email\", \"apple\", \"google\", \"facebook\").required(),\n            google_account_id: Joi.when(\"login_type\", {is: \"google\", then: Joi.string().required()}).empty(''),\n        })\n        .required();\n\n\n\n    private logoutUserJoiSchema = this.userJoiSchema.required();\n\n\n\n\n\n\n\n    addNewUser = async (req: Request, res: Response, next: Next) => {\n        try {\n            const decryptedData = req.decryptedData;\n            // const value = await this.addNewUserJoiSchema.validateAsync(decryptedData, this.joiOptions);\n            const result = await this.userService.registerAUser(req.body);\n            let httpStatusCode = 200\n            return res.status(httpStatusCode).json(result);\n        } catch (error) {\n            console.log(\"error\" , error)\n            return res.status(400).json(this.ERR({\n                status: \"failed\",\n                message: \"Unable to Register user\",\n                errorMessage: error.message\n            }, error));\n        }\n    };\n\n\n    userLogin = async (req: Request, res: Response, next: Next) => {\n        try {\n            const decryptedData = req.decryptedData;\n            const value = await this.loginUserJoiSchema.validateAsync(decryptedData, this.joiOptions);\n            const result = await this.userService.userLogin(value);\n            let httpStatusCode = 200\n            return res.status(httpStatusCode).json(result);\n        } catch (error) {\n            console.log(\"error\" , error)\n            return res.status(400).json(this.ERR({\n                status: \"failed\",\n                message: \"Unable to Login user\",\n                errorMessage: error.message\n            }, error));\n        }\n    };\n\n    userLogout = async (req: Request, res: Response, next: Next) => {\n        try {\n            const decryptedData = req.decryptedData;\n            const value = await this.logoutUserJoiSchema.validateAsync(decryptedData, this.joiOptions);\n            const result = await this.userService.userLogout(value);\n            return res.status(200).json(result);\n        } catch (error) {\n            console.log(\"error\" , error)\n            return res.status(400).json(this.ERR({\n                status: \"failed\",\n                message: \"Unable to Logout user\",\n                errorMessage: error.message\n            }));\n        }\n    };\n\n\n    // get alll users list \n    getUsers = async (req: Request, res: Response, next: Next) => {\n        try {\n            let result = await this.userService.getUserslist();\n            return res.send(result);\n        } catch (error) {\n            return res.status(400).json(this.ERR({\n                status: \"failed\",\n                message: \"Unable to users details\",\n                errorMessage: error.message\n            }, error));\n        }\n    };\n\n\n\n\n    blockAndUnblock = async (req: Request, res: Response, next: Next) => {\n        try {\n            const value = await this.blockSchema.validateAsync(req.body, { stripUnknown: true });\n            let result = await this.userService.blockandUnblock(value)\n            return res.send(result);\n        } catch (error) {\n            return res.status(400).json(this.ERR({\n                status: \"failed\",\n                message: \"Unable to block and unblock user \",\n                errorMessage: error.message\n            }, error));\n        }\n    };\n\n  \n    changePassword = async (req: Request, res: Response, next: Next) => {\n        try {\n            const decryptedData = req.decryptedData;\n            const value = await this.chnagePasswordSchema.validateAsync(decryptedData, { stripUnknown: true });\n            const result = await this.userService.changePassword(value)\n            return res.send(result);\n        } catch (error) {\n            return res.status(400).json(this.ERR({\n                status: \"failed\",\n                message: \"Unable to change password!\",\n                errorMessage: error.message\n            }, error));\n        }\n    }\n\n\n\n}\n"]}