{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":";;;AAAA,oDAAmD;AACnD,+CAA2E;AAE3E,0CAA0C;AAC1C,mCAAmC;AAInC,6BAA6B;AAE7B,uCAAwC;AAExC,qCAAqC;AAExB,QAAA,GAAG,GAAY,OAAO,EAAE,CAAC;AACtC,sDAA8C;AAC9C,wDAAgD;AAChD,8DAAqD;AACrD,gDAAiD;AAIjD,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3B,WAAG,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;AAEnD,0BAA0B;AAE1B,MAAM,WAAW,GAAgB;IAC7B,kBAAkB;IAClB,MAAM,EAAE,GAAG;IACX,cAAc,EAAE;QACZ,IAAI;QACJ,cAAc;QACd,YAAY;QACZ,cAAc;QACd,QAAQ;QACR,kBAAkB;QAClB,cAAc;QACd,QAAQ;QACR,gBAAgB;KACnB;IACD,OAAO,EAAE,wCAAwC;IACjD,cAAc,EAAE,EAAE;CACrB,CAAC;AAIF,WAAG,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;AAC3B,WAAG,CAAC,GAAG,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;AAChC,WAAG,CAAC,GAAG,CAAC,kCAAoB,CAAC,CAAC;AAC9B,WAAG,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,kCAAoB,CAAC,CAAC,CAAC;AACzC,WAAG,CAAC,GAAG,CAAC,sBAAW,EAAE,qBAAU,EAAE,CAAC,CAAC;AACnC,WAAG,CAAC,GAAG,CAAC,sBAAW,EAAE,sBAAW,EAAE,CAAC,CAAC;AACpC,WAAG,CAAC,GAAG,CAAC,sBAAW,EAAE,yBAAc,EAAE,CAAC,CAAC;AAIvC,WAAG,CAAC,GAAG,CAAC,GAAG,sBAAW,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;IACxC,OAAO,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;AAC3F,CAAC,CAAC,CAAC;AACH,WAAG,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;IACpB,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE;QACf,cAAc,EAAE,0BAA0B;KAC7C,CAAC,CAAC;IACH,GAAG,CAAC,KAAK,CAAC,8GAA8G,CAAC,CAAC;IAC1H,OAAO,GAAG,CAAC,GAAG,EAAE,CAAC;AACrB,CAAC,CAAC,CAAC;AAMH,cAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AAC5B,cAAG,CAAC,kBAAkB,EAAE,KAAK,CAAC,CAAC;AAE/B,YAAY;AACZ,kBAAO,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,kBAAkB,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;IAC5H,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACrB,CAAC,CAAC,CAAC","sourcesContent":["import * as httpContext from 'express-http-context'\nimport { decryptionMiddleware, encryptionMiddleware } from \"./middlewares\";\nimport { Express, json, urlencoded } from \"express\";\nimport * as bodyParser from \"body-parser\";\nimport * as express from \"express\";\nimport * as http from \"http\";\nimport { CorsOptions } from \"cors\";\nimport {HTTP_PORT} from \"./config/constant\";\nimport * as cors from \"cors\";\n\nimport { connect, set } from \"mongoose\";\n\nimport * as mung from \"express-mung\";\nimport * as jwt from \"jsonwebtoken\";\nexport const app: Express = express();\nimport userRoutes from \"./routes/user.routes\";\nimport agentRoutes from \"./routes/agent.routes\";\nimport customerRoutes from './routes/customer.routes'\nimport {  API_VERSION } from \"./config/constant\";\n\n\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n//app.use(cookieParser());\n\nconst corsOptions: CorsOptions = {\n    // origins: [\"*\"],\n    origin: \"*\",\n    allowedHeaders: [\n        \"at\",\n        \"Content-Type\",\n        \"encryption\",\n        \"access_token\",\n        'Origin',\n        'X-Requested-With',\n        'Content-Type',\n        'Accept',\n        'X-Access-Token',\n    ],\n    methods: 'GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE',\n    exposedHeaders: [],\n};\n\n\n\napp.use(cors(corsOptions));\napp.use(httpContext.middleware);\napp.use(decryptionMiddleware);\napp.use(mung.json(encryptionMiddleware));\napp.use(API_VERSION, userRoutes());\napp.use(API_VERSION, agentRoutes());\napp.use(API_VERSION, customerRoutes());\n\n\n\napp.get(`${API_VERSION}/test`, (req, res) => {\n    return res.status(200).json({ current_time: Date().toString(), name: req.query.name });\n});\napp.get(\"/\", (_, res) => {\n    res.writeHead(200, {\n        \"Content-Type\": \"text/html; charset=utf-8\",\n    });\n    res.write(\"<h1 style='font-family:monospace;text-align:center;font-size:72px'><br/><br/><br/>ðŸš€<br/>API is Ready! </h1>\");\n    return res.end();\n});\n\n\n\n\n\nset(\"useCreateIndex\", true);\nset(\"useFindAndModify\", false);\n\n//@ts-ignore\nconnect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true, config: { autoIndex: false } }).catch(err => {\n    console.log(err);\n});\n\n\n"]}