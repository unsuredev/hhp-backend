{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/middlewares/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as httpContext from 'express-http-context'\nimport { NODE_ENV, NO_BODY_URLS, BYPASS_URLS, No_ENCRYPT_RESP_URLS,API_VERSION } from \"../config/constant\";\nimport { db } from \"../models/db\";\nimport { decode } from \"jsonwebtoken\";\nimport { Request, Response, NextFunction as Next } from \"express\";\nimport { ssDecrypt, ssEncrypt } from \"../services/encryption\";\nexport const decryptionMiddleware = (req: Request, res: Response, next: Next) => {\n    let decryptedData = null;\n    const reqUrl = req.originalUrl.split(\"?\")[0]; // Because of resetpassword token link\n    const { encryption } = req.headers //TODO remove this for prod , security risk\n    const requestId =req.headers['x-request-id-nginx']\n    httpContext.set('reqId',requestId)\n    if(reqUrl===\"/favicon.ico\"){\n        return res.status(200).send()\n    }\n    if ((NODE_ENV === \"local\") || NO_BODY_URLS.includes(reqUrl.split(API_VERSION)[1]) || encryption===\"false\" ) {\n        //Decryption not needed\n        decryptedData = req.body;\n    } else {\n        decryptedData = ssDecrypt(req.body.data);\n    }\n// console.log(BYPASS_URLS.includes(reqUrl),reqUrl, BYPASS_URLS)\n    if (BYPASS_URLS.includes(reqUrl.split(API_VERSION)[1])) {\n        //These urls dont have user_id\n\n        req.decryptedData = decryptedData;\n        next();\n    } else {\n        const { access_token } = req.headers;\n        if(!access_token){\n            return res.status(400).json({\"status\":\"failed\",message:\"access_token is required\"})\n        }\n        //@ts-ignore\n        const user_id = decode(access_token).user_id;\n        // Checking if access_token is correct\n        db.Users.findOne({ user_id: user_id })\n            .then((user) => {\n                if (!user || !user.user_id) {\n                    return res.status(400).json({ status: \"failed\", message: \"user not found\" });\n                }\n                if (user.access_token !== access_token) {\n                    return res.status(400).json({ status: \"invalid\", message: \"invalid access_token\" }); // request by prabhkar to change status\n                }\n                req.decryptedData = decryptedData;\n                // req.decryptedData[\"user_id\"] = user_id;\n                req[\"user\"] = { \"user_id\": user.user_id, \"email\": user.email }; // For Sentry User Tracking\n                // @ts-ignore\n                const api_activity_object={ REQ_URL: reqUrl, ...req.decryptedData ,...req.user,\"curTime\":Date.now()}\n                //@ts-ignore\n                req.decryptedData[\"user\"] = user; // Not logging the user object, taking up too much space\n                next();\n            })\n            .catch((err) => {\n                console.log(\"error\" , err)\n                return res.status(400).json({ status: \"failed\", message: \"Unknown Error\" });\n            });\n    }\n};\n\n\nexport const encryptionMiddleware = (body, req: Request, res: Response) => {\n    const data = body.data;\n    const { encryption } = req.headers //TODO remove this for prod , security risk\n    if (NODE_ENV === \"local\" || No_ENCRYPT_RESP_URLS.includes[req.originalUrl.split(API_VERSION)[1]] || encryption===\"false\" ) {\n        body.data = data;\n    } else {\n        body.data = ssEncrypt(JSON.stringify(data));\n    }\n    return body;\n};\n"]}